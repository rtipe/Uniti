//
// Created by youba on 28/10/2023.
//

#pragma once

#include <SFML/Window/Event.hpp>
#include "IInput.hpp"

/** @brief Input class for handling user input using SFML.
*/
class Input : public IInput {
public:
    /** @brief Constructor for the Input class.
        @param sf::Event &event: A reference to the SFML event object.
    */
    Input(sf::Event &event);

    /** @brief Update the input status.
    */
    void update() override;

    /** @brief Check if a specific key is pressed.
        @param const std::string &key: The name of the key to check.
        @return bool: True if the key is pressed, otherwise false.
    */
    bool isPressed(const std::string &key) override;

    /** @brief Check if a specific key is pressed.
        @param Key key: The key to check.
        @return bool: True if the key is pressed, otherwise false.
    */
    bool isPressed(Key key) override;

    /** @brief Check if a specific key is released.
        @param const std::string &key: The name of the key to check.
        @return bool: True if the key is released, otherwise false.
    */
    bool isReleased(const std::string &key) override;

    /** @brief Check if a specific key is released.
        @param Key key: The key to check.
        @return bool: True if the key is released, otherwise false.
    */
    bool isReleased(Key key) override;

    /** @brief Get the events generated by input actions.
        @return std::vector<std::string>&: A reference to the vector of input events.
    */
    std::vector<std::string> &getEvents() override;

    /** @brief Clear the list of input events.
    */
    void clearEvents() override;

private:
    sf::Event &_event;
    std::vector<std::string> _events;
};
