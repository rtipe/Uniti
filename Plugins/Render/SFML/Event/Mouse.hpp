//
// Created by youba on 28/10/2023.
//

#pragma once

#include <SFML/Window/Event.hpp>
#include <SFML/Graphics/RenderWindow.hpp>
#include "IMouse.hpp"

/** @brief Mouse class for handling mouse input using SFML.
*/
class Mouse : public IMouse {
public:
    /** @brief Constructor for the Mouse class.
        @param sf::Event &event: A reference to the SFML event object.
        @param sf::RenderWindow &window: A reference to the SFML render window.
    */
    Mouse(sf::Event &event, sf::RenderWindow &window);

    /** @brief Update the mouse input status.
    */
    void update() override;

    /** @brief Check if a specific mouse button is pressed.
        @param const std::string &key: The name of the mouse button to check.
        @return bool: True if the mouse button is pressed, otherwise false.
    */
    bool isMousePressed(const std::string &key) override;

    /** @brief Check if a specific mouse button is pressed.
        @param KeyMouse keyMouse: The mouse button to check.
        @return bool: True if the mouse button is pressed, otherwise false.
    */
    bool isMousePressed(KeyMouse keyMouse) override;

    /** @brief Check if a specific mouse button is released.
        @param const std::string &key: The name of the mouse button to check.
        @return bool: True if the mouse button is released, otherwise false.
    */
    bool isMouseReleased(const std::string &key) override;

    /** @brief Check if a specific mouse button is released.
        @param KeyMouse keyMouse: The mouse button to check.
        @return bool: True if the mouse button is released, otherwise false.
    */
    bool isMouseReleased(KeyMouse keyMouse) override;

    /** @brief Get the current mouse position.
        @return Uniti::Vector2f: A 2D vector representing the mouse position.
    */
    Uniti::Vector2f getPosition() override;

    /** @brief Get the events generated by mouse input actions.
        @return std::vector<std::string>&: A reference to the vector of mouse input events.
    */
    std::vector<std::string> &getEvents() override;

    /** @brief Clear the list of mouse input events.
    */
    void clearEvents() override;

private:
    sf::RenderWindow &_window;
    sf::Event &_event;
    std::vector<std::string> _events;
};
